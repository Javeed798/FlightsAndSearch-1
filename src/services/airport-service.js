const {AirportRepository} = require("../repository/index");class AirportService {      constructor() {      this.airportRepository = new AirportRepository();   }      async createAirport(data) {      try {         const airport = await this.airportRepository.create(data)         return airport;      } catch (err) {         console.log("Something went wrong creating Airport");         throw {err};      }   }      async deleteAirport(airportId) {      try {         const response = await this.airportRepository.deleteAirport(airportId)         return response;      } catch (err) {         console.log("Something went wrong deleting Airport");         throw {err};      }   }      async updateAirport(airportId, data) {      try {         const response = await this.airportRepository.updateAirport(airportId, data);         return response;      } catch (err) {         console.log("Something went wrong updating Airport");         throw {err};      }   }      async getAirport(airportId) {      try {         const response = await this.airportRepository.getAirport(airportId);         return response;      } catch (err) {         console.log("Something went wrong fetching Airport");         throw {err};      }   }      async getAllAirports(filter) {      try {         const airports = await this.airportRepository.getAllAirports({name: filter.name});         return airports;      } catch (err) {         console.log("Something went wrong fetching all cities");         throw {err};      }   }   }module.exports = AirportService;